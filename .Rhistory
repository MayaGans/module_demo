shiny::runApp('share_data')
# Module server function
csvFile <- function(input, output, session, stringsAsFactors) {
# The selected file, if any
userFile <- reactive({
# If no file is selected, don't do anything
validate(need(input$file, message = FALSE))
input$file
})
# The user's data, parsed into a data frame
dataframe <- reactive({
read.csv(userFile()$datapath,
header = input$heading,
quote = input$quote,
stringsAsFactors = stringsAsFactors)
})
# We can run observers in here if we want to
observe({
msg <- sprintf("File %s was uploaded", userFile()$name)
cat(msg, "\n")
})
# Return the reactive that yields the data frame
return(dataframe)
}
shinyApp(ui, server)
shinyApp(ui, server)
# The first argument is the id -- the namespace for the module
csvFileInput <- function(id, label = "CSV file") {
# Create a namespace function using the provided id
#ALL UI FUNCTION BODIES MUST BEGIN WITH THIS
ns <- NS(id)
# Rather than fluidPage use a taglist
# If you're just returning a div you can skip the taglist
tagList(
# ns file
# ns heading
# ns quote
# only needed to be unique WITHIN THIS FUNCTION
fileInput(ns("file"), label),
checkboxInput(ns("heading"), "Has heading"),
selectInput(ns("quote"), "Quote", c(
"None" = "",
"Double quote" = "\"",
"Single quote" = "'"
))
)
}
runApp('share_data')
runApp()
runApp()
runApp()
data.frame(not_unique = c("a", "a", "b", "b", "c", "c"),
age = c(45,45,60,60,20,20),
group = c("1", "1", "2", "2", "3", "3"))
test <- data.frame(not_unique = c("a", "a", "b", "b", "c", "c"),
age = c(45,45,60,60,20,20),
group = c("1", "1", "2", "2", "3", "3"))
test %>% distinct()
library(tidyverse)
test %>% distinct(not_unique, age, group)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('select_color_top')
runApp('select_color_top')
library(reticulate)
library(reticulate)
library(reticulate)
use_python("/usr/local/bin/python")
library(reticulate)
use_python("/usr/local/bin/python")
py_install("seaborn")
library(reticulate)
use_python("/usr/local/bin/python")
# py_install("seaborn")
# Rather than fluidPage use a taglist
# If you're just returning a div you can skip the taglist
tagList(
sidebarPanel(
fileInput(ns("file"), label)),
mainPanel(tableOutput("table"))
)
shiny::runApp()
library(ggplot2)
library(tidyverse)
devtools::install_github("wmurphyrd/fiftystater")
library(fiftystater)
mapdata <- read.csv("state-medal-count.csv", header=TRUE, stringsAsFactors=FALSE)
mapdata %>% glimpse()
fifty_states$id <- toupper(fifty_states$id)
ttt <- left_join(fifty_states, ven_all, by = c("id" = "State")
data("fifty_states")
ggplot() + geom_polygon( data=fifty_states, aes(x=long, y=lat, group = group) ,color="white", fill="grey10")
ggplot() + geom_polygon(data=ttt, aes(x=long, y=lat, group = group, fill = count), color="white") +
geom_point(data=nnn, aes(x=Longitude, y=Latitude, size = count), color = "black") +
theme_void() +
guides(fill = FALSE) +
guides(color = FALSE)
library(ggplot2)
library(tidyverse)
library(fiftystater)
library(openintro)
library(lubridate)
vvv <- read.csv("/Users/mayagans/Downloads/ven_merge - ven_merge.csv")
vvv$Date <- ymd(vvv$Date)
vvv$year <- year(vvv$Date)
ven_date <- vvv %>% select(Date, State, Latitude, Longitude, year) %>%
distinct() %>%
filter(!is.na(State))
total <- ven_date %>%
group_by(State) %>%
summarise(count = n()) %>%
na.omit(!is.na(State)) %>%
filter(State != "-")
total$full <- tolower(abbr2state(total$State))
ddd <- left_join(fifty_states, total, by = c("id" = "full"))
for (i in 1983:2019) {
yearly <- ven_date %>%
group_by(Latitude, Longitude) %>%
summarise(count = n()) %>%
filter(Longitude > -158)
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
scale_fill_gradientn(colors = c("#00118A","#80008E","#E26F55"), na.value = "black") +
geom_point(data=yearly, aes(x=Longitude, y=Latitude, size = count), color = "#DBFF45", alpha = 0.8) +
guides(fill = FALSE) +
ggtitle("PHISH SHOWS") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
ggsave(paste0("yearly_all", i, ".svg"), units ="in", width = 7, height=5, dpi=300)
}
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
scale_fill_gradientn(colors = c("#00118A","#80008E","#E26F55"), na.value = "black") +
# geom_point(data=yearly, aes(x=Longitude, y=Latitude, size = count), color = "#DBFF45", alpha = 0.8) +
guides(fill = FALSE) +
ggtitle("PHISH SHOWS") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
vvv <- read.csv("/Users/mayagans/Downloads/ven_merge - ven_merge.csv")
vvv <- read.csv("/Users/mayagans/Desktop/ven_merge - ven_merge.csv")
vvv$Date <- ymd(vvv$Date)
vvv$year <- year(vvv$Date)
ven_date <- vvv %>% select(Date, State, Latitude, Longitude, year) %>%
distinct() %>%
filter(!is.na(State))
total <- ven_date %>%
group_by(State) %>%
summarise(count = n()) %>%
na.omit(!is.na(State)) %>%
filter(State != "-")
total$full <- tolower(abbr2state(total$State))
ddd <- left_join(fifty_states, total, by = c("id" = "full"))
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
scale_fill_gradientn(colors = c("#00118A","#80008E","#E26F55"), na.value = "black") +
# geom_point(data=yearly, aes(x=Longitude, y=Latitude, size = count), color = "#DBFF45", alpha = 0.8) +
guides(fill = FALSE) +
ggtitle("PHISH SHOWS") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
vvv <- read.csv("/Users/mayagans/Desktop/ven_merge - ven_merge.csv")
vvv$Date <- ymd(vvv$Date)
vvv$year <- year(vvv$Date)
ven_date <- vvv %>% select(Date, State, Latitude, Longitude, year) %>%
distinct() %>%
filter(!is.na(State))
total <- ven_date %>%
group_by(State) %>%
summarise(count = n()) %>%
na.omit(!is.na(State)) %>%
filter(State != "-")
total
total$full <- tolower(abbr2state(total$State))
ddd <- left_join(fifty_states, total, by = c("id" = "full"))
ddd
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void()
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
scale_fill_gradientn(colors = c("#00118A","#80008E","#E26F55"), na.value = "black")
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void()
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
# geom_point(data=yearly, aes(x=Longitude, y=Latitude, size = count), color = "#DBFF45", alpha = 0.8) +
guides(fill = FALSE) +
ggtitle("PHISH SHOWS") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
vvv <- read.csv("/Users/mayagans/Desktop/ven_merge - ven_merge.csv")
vvv$Date <- ymd(vvv$Date)
vvv$year <- year(vvv$Date)
ven_date <- vvv %>% select(Date, State, Latitude, Longitude, year) %>%
distinct() %>%
filter(!is.na(State))
total <- ven_date %>%
group_by(State) %>%
summarise(count = n()) %>%
na.omit(!is.na(State)) %>%
filter(State != "-")
total
total$full <- tolower(abbr2state(total$State))
total
ddd <- left_join(fifty_states, total, by = c("id" = "full"))
View(ddd)
total$full <- toupper(abbr2state(total$State))
ddd <- left_join(fifty_states, total, by = c("id" = "full"))
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
# geom_point(data=yearly, aes(x=Longitude, y=Latitude, size = count), color = "#DBFF45", alpha = 0.8) +
guides(fill = FALSE) +
ggtitle("PHISH SHOWS") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
total$full <- toupper(abbr2state(total$State))
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
scale_fill_gradientn(colors = c("#00118A","#80008E","#E26F55"), na.value = "black") +
# geom_point(data=yearly, aes(x=Longitude, y=Latitude, size = count), color = "#DBFF45", alpha = 0.8) +
guides(fill = FALSE) +
ggtitle("PHISH SHOWS") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
scale_fill_gradientn(colors = c("#00118A","#80008E","#E26F55"), na.value = "black") +
# geom_point(data=yearly, aes(x=Longitude, y=Latitude, size = count), color = "#DBFF45", alpha = 0.8) +
guides(fill = FALSE) +
ggtitle("SUMMER TOUR") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
tt <- read.csv("/Users/mayagans/Downloads/Untitled spreadsheet - Sheet1.csv")
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
scale_fill_gradientn(colors = c("#00118A","#80008E","#E26F55"), na.value = "black") +
geom_point(data=tt, aes(x=long, y=lat, size = count), color = "#DBFF45", alpha = 0.8) +
guides(fill = FALSE) +
ggtitle("SUMMER TOUR") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
tt$lat <- tt$lat*-1
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
scale_fill_gradientn(colors = c("#00118A","#80008E","#E26F55"), na.value = "black") +
geom_point(data=tt, aes(x=long, y=lat, size = count), color = "#DBFF45", alpha = 0.8) +
guides(fill = FALSE) +
ggtitle("SUMMER TOUR") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
tt <- read.csv("/Users/mayagans/Downloads/Untitled spreadsheet - Sheet1.csv")
tt$long <- tt$long*-1
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
scale_fill_gradientn(colors = c("#00118A","#80008E","#E26F55"), na.value = "black") +
geom_point(data=tt, aes(x=long, y=lat, size = count), color = "#DBFF45", alpha = 0.8) +
guides(fill = FALSE) +
ggtitle("SUMMER TOUR") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
scale_fill_gradientn(colors = c("#00118A","#80008E","#E26F55"), na.value = "black") +
geom_point(data=tt, aes(x=long, y=lat, size = count), color = "#DBFF45", alpha = 0.8) +
geom_line() +
guides(fill = FALSE) +
ggtitle("SUMMER TOUR") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
scale_fill_gradientn(colors = c("#00118A","#80008E","#E26F55"), na.value = "black") +
geom_point(data=tt, aes(x=long, y=lat, size = count), color = "#DBFF45", alpha = 0.8) +
geom_line(data=tt, aes(x=long, y=lat, size = count), color = "#DBFF45", alpha = 0.8) +
guides(fill = FALSE) +
ggtitle("SUMMER TOUR") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
scale_fill_gradientn(colors = c("#00118A","#80008E","#E26F55"), na.value = "black") +
geom_point(data=tt, aes(x=long, y=lat, size = count), color = "#DBFF45", alpha = 0.8) +
geom_line(data=tt, aes(x=long, y=lat), color = "#DBFF45", alpha = 0.8) +
guides(fill = FALSE) +
ggtitle("SUMMER TOUR") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
ggplot() +
geom_polygon(data=ddd, color="black",
aes(x=long, y=lat, group = group, fill=count*10)) +
theme_void() +
scale_fill_gradientn(colors = c("#00118A","#80008E","#E26F55"), na.value = "black") +
geom_point(data=tt, aes(x=long, y=lat, size = count), color = "#DBFF45", alpha = 0.8) +
geom_path(data=tt, aes(x=long, y=lat), color = "#DBFF45", alpha = 0.8) +
guides(fill = FALSE) +
ggtitle("SUMMER TOUR") +
theme(plot.title = element_text(color = "#fde725ff", family="Futura", lineheight=.8, face="bold", size = 50, hjust = 0.5)) +
theme(plot.background = element_rect(fill = "black", color = "black")) +
guides(size = FALSE)
shiny::runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
runApp('settimeout')
shiny::runApp('settimeout')
runApp('~/Desktop/modularize/repex')
runApp()
runApp('select_color_top')
runApp('settimeout')
